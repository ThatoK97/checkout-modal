{"version":3,"sources":["ModalForm.js","App.js","serviceWorker.js","index.js"],"names":["ModalForm","props","onClickOutside","e","closeModal","element","target","modalRef","current","contains","preventDefault","stopPropagation","inputRef","useRef","overlayRef","timeline","gsap","paused","useEffect","from","duration","autoAlpha","y","play","focus","document","body","addEventListener","removeEventListener","quantity","className","ref","action","onSubmit","value","htmlFor","placeholder","onChange","type","name","id","App","useState","setQuantity","isOpenModal","setModal","onClick","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oMAGe,SAASA,EAAWC,GAGjC,SAASC,EAAeC,GAAI,IAClBC,EAAeH,EAAfG,WACFC,EAAUF,EAAEG,OACdC,EAASC,UAAYD,EAASC,QAAQC,SAASJ,KACjDF,EAAEO,iBACFP,EAAEQ,kBACFP,KAYJ,IAAMQ,EAAWC,mBACXN,EAAWM,iBAAO,MAClBC,EAAaD,iBAAO,MACpBE,EAAWC,IAAKD,SAAS,CAACE,QAAQ,IAExCC,qBAAU,WAgBR,OAfAH,EAASI,KAAKL,EAAWN,QAAS,CAChCY,SAAU,IACVC,UAAW,IAEZF,KAAKZ,EAASC,QAAS,CACtBY,SAAU,IACVC,UAAW,EACXC,EAAG,KAELP,EAASQ,OACTX,EAASJ,QAAQgB,QAEjBC,SAASC,KAAKC,iBAAiB,QAASzB,GAGjC,WACLuB,SAASC,KAAKE,oBAAoB,QAAS1B,OA3CN,IAgDjC2B,EAAa5B,EAAb4B,SAEN,OACM,yBAAKC,UAAU,iBAAiBC,IAAKjB,GACrC,yBAAKgB,UAAU,QAAQC,IAAKxB,GAC5B,kDACA,0BAAMyB,OAAO,IAAIC,SAAU,SAAC9B,GAAD,OA1CnC,SAAS8B,EAAS9B,GAAI,IACZC,EAAsBH,EAAtBG,WACR6B,EAD8BhC,EAAViC,OAEpB9B,IACAD,EAAEO,iBACFP,EAAEQ,kBAqCsCsB,CAAS9B,KACzC,2BAAOgC,QAAQ,YAAf,YACA,6BACI,6BACA,4CAIA,2BAAOJ,IAAKnB,EAAUsB,MAAOL,EAAUO,YAAY,OAAOC,SA7D9C,SAAClC,GAAD,OAAOA,EAAEG,OAAO4B,OA6D2DI,KAAK,OAAOC,KAAK,aACxG,6BACA,2BAAOJ,QAAQ,YAAf,YACA,4BAAQK,GAAG,WAAWD,KAAK,YACvB,4BAAQL,MAAM,QAAd,KACA,4BAAQA,MAAM,QAAd,QAIR,4BAAQI,KAAK,UAAb,qBCrBGG,MAlDf,WAAgB,IAAD,EACmBC,mBAAS,GAD5B,mBACNb,EADM,KACIc,EADJ,OAGmBD,oBAAS,GAH5B,mBAGNE,EAHM,KAGOC,EAHP,KAgBb,OACE,yBAAKf,UAAU,OACb,wCACA,+BACE,+BACE,4BACE,wCACA,0CACA,uCAGJ,+BACE,4BACE,4BAAKD,GACL,gCA1BK,IA2BL,gCA3BK,GA2BUA,GACf,4BACE,4BAAQiB,QA1BA,kBAAMD,GAAUD,KA0BxB,qBAOPA,GAAe,kBAAC5C,EAAD,CAChBI,WAjCJ,WACEyC,GAAS,IAiCPX,MAAOL,EACPI,SAhCJ,SAAuBJ,GACrBc,EAAYd,QCHIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,iBACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b153ff6e.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\nexport default function ModalForm( props ) {\r\n  const handleValueChange = (e) => e.target.value;\r\n\r\n  function onClickOutside(e) {\r\n    const { closeModal } = props;\r\n    const element = e.target;\r\n    if (modalRef.current && !modalRef.current.contains(element)) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      closeModal();\r\n    }\r\n  }\r\n  function onSubmit(e) {\r\n    const { closeModal, value } = props;\r\n    onSubmit(value);\r\n    closeModal();\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n\r\n  // define refs and timeline\r\n  const inputRef = useRef();\r\n  const modalRef = useRef(null);\r\n  const overlayRef = useRef(null);\r\n  const timeline = gsap.timeline({paused: false});\r\n\r\n  useEffect(() => {\r\n    timeline.from(overlayRef.current, {\r\n      duration: 0.25,\r\n      autoAlpha: 0\r\n    })\r\n    .from(modalRef.current, {\r\n      duration: 0.25,\r\n      autoAlpha: 0,\r\n      y: 25\r\n    })\r\n    timeline.play()\r\n    inputRef.current.focus();\r\n\r\n    document.body.addEventListener(\"click\", onClickOutside);\r\n    // timeline.kill()\r\n\r\n    return () => {\r\n      document.body.removeEventListener(\"click\", onClickOutside);\r\n    }\r\n  }); // , [overlayRef.current, modalRef.current]\r\n\r\n  // define quantity as props\r\n  const { quantity } = props;\r\n\r\n    return (\r\n          <div className=\"modal--overlay\" ref={overlayRef}>\r\n          <div className=\"modal\" ref={modalRef}>\r\n          <h1>Insert a new value</h1>\r\n          <form action=\"?\" onSubmit={(e) => onSubmit(e)}>\r\n            <label htmlFor=\"quantity\">Quantity</label>\r\n            <div>\r\n                <div>\r\n                <span>\r\n                    Select...\r\n                </span>\r\n                </div>\r\n                <input ref={inputRef} value={quantity} placeholder=\"0.00\" onChange={handleValueChange} type=\"text\" name=\"quantity\"></input>\r\n                <div>\r\n                <label htmlFor=\"currency\">Currency</label>\r\n                <select id=\"Currency\" name=\"currency\">\r\n                    <option value=\"rand\">R</option>\r\n                    <option value=\"pula\">P</option>\r\n                </select>\r\n                </div>\r\n                </div>\r\n            <button type=\"submit\">Save new value</button>\r\n          </form>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState } from \"react\";\nimport ModalForm from \"./ModalForm\";\n\nfunction App() {\n  const [quantity, setQuantity] = useState(2);\n  // open modal\n  const [isOpenModal, setModal] = useState(false);\n  const amount = 21;\n  // changes currency sign based on selected currency in select option\n\n  const openModalFn = () => setModal(!isOpenModal);\n  function closeModal() {\n    setModal(false);\n  }\n  function onSubmitFinal(quantity) {\n    setQuantity(quantity);\n  }\n\n  //write conditional logic to switch between currency opts\n  return (\n    <div className=\"app\">\n      <h1>Checkout</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Quantity</th>\n            <th>Unit price</th>\n            <th>Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{quantity}</td>\n            <td>R{amount}</td> \n            <td>R{amount * quantity}</td>\n            <td>\n              <button onClick={openModalFn}>\n                Edit quantity\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      {isOpenModal && <ModalForm\n      closeModal={closeModal} \n      value={quantity}\n      onSubmit={onSubmitFinal}\n      />\n      }\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}